(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{410:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=l(t(1)),r=l(t(455)),o=l(t(415)),s=l(t(413));function l(e){return e&&e.__esModule?e:{default:e}}n.default=function(e){return a.default.createElement("div",null,a.default.createElement(o.default,{children:r.default}),a.default.createElement(s.default,{previous:{href:"/getting-started",name:"Getting Started"},next:{href:"/grid-system",name:"Grid System"}}))}},412:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=s(t(8)),r=s(t(1)),o=t(12);function s(e){return e&&e.__esModule?e:{default:e}}n.default=function(e){return r.default.createElement(o.Heading,(0,a.default)({},e,{is:"h1",fontSize:[5,6,7,8],my:4}))}},413:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,r=t(1),o=(a=r)&&a.__esModule?a:{default:a},s=t(17),l=t(417),i=t(12);n.default=function(e){return o.default.createElement(i.Flex,{my:[3,5]},e.previous&&o.default.createElement(i.NavLink,{is:s.Link,to:e.previous.href},o.default.createElement(l.Chevron,{left:!0,size:16}),o.default.createElement(i.Text,{fontWeight:"bold",ml:2},e.previous.name)),e.next&&o.default.createElement(i.NavLink,{is:s.Link,ml:"auto",to:e.next.href},o.default.createElement(i.Text,{bold:!0,mr:2},e.next.name),o.default.createElement(l.Chevron,{right:!0,size:16})))}},415:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=m(t(8)),r=m(t(18)),o=m(t(24)),s=m(t(23)),l=m(t(22)),i=m(t(21)),d=m(t(1)),u=(m(t(7)),m(t(121))),p=m(t(419)),c=t(12),h=(function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);n.default=e}(c),m(t(412)));function m(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function n(){return(0,o.default)(this,n),(0,l.default)(this,(n.__proto__||(0,r.default)(n)).apply(this,arguments))}return(0,i.default)(n,e),(0,s.default)(n,[{key:"render",value:function(){return d.default.createElement(p.default,{source:this.props.children,renderers:g})}}]),n}(d.default.Component),g={code:function(e){var n=e.language,t=e.value;if(!/\./.test(n))return d.default.createElement(c.Pre,{fontSize:13,px:3,py:3,my:3,color:"blue",bg:"#fcfcff"},t);var a=!!/\.\./.test(n);return d.default.createElement(c.Box,{mb:3},d.default.createElement(u.default,{code:t,noInline:a}))},heading:function(e){return 1===e.level?d.default.createElement(h.default,e):d.default.createElement(c.BlockLink,{href:"#"+e.children},d.default.createElement(c.Heading,(0,a.default)({},e,{id:e.children,mt:5,mb:2})))},inlineCode:function(e){return d.default.createElement(c.Code,{color:"blue",children:e.value})},link:c.Link,paragraph:function(e){return d.default.createElement(c.Measure,(0,a.default)({},e,{maxWidth:"40em",mb:3}))}};n.default=f},455:function(e,n){e.exports="\n# Props\n\nRebass components use [styled-system](https://github.com/jxnblk/styled-system) for responsive, theme-based style props.\n\n### Width\n\nThe Flex and Box components accept a `width` prop.\n\n```.jsx\n<Box width={1/2} bg='blue'>\n  Hello\n</Box>\n```\n\n```jsx\n// Numbers from 0â€“1 are converted to percentage widths\n// e.g. width 50%\n<Text width={1/2} />\n\n// Numbers greater than 1 are converted to pixels\n<Text width={256} />\n\n// Strings can be used for other values\n<Text width='32em' />\n\n// Arrays can be used for mobile-first responsive styles\n<Text\n  width={[\n    1,    // 100% width at the smallest breakpoint\n    1/2,  // 50% width at the next breakpoint\n    1/4   // 25% width at the next\n  ]}\n/>\n```\n\n### Font Size\n\nThe Text component and other typographic components accept a `fontSize` prop\nthat makes referencing steps on the typographic scale simple and helps promote consistent design.\n\n```.jsx\n<Text fontSize={5}>\n  Hello\n</Text>\n```\n\n```jsx\n// Numbers are used to reference steps on the typographic scale\n// i.e. the `theme.fontSizes` array\n<Text fontSize={3} />\n\n// Numbers greater than the length of the typographic scale\n// are converted to pixels\n<Text fontSize={18} />\n\n// Strings can be used for other values\n<Text fontSize='3em' />\n\n// Arrays can be used for mobile-first responsive styles\n<Text fontSize={[ 3, 4, 5 ]} />\n```\n\n### Margin and Padding\n\nAll Rebass component use the [space](https://github.com/jxnblk/styled-system#space-responsive) utility from [styled-system](https://github.com/jxnblk/styled-system) to handle responsive margin and padding props based on a global spacing scale (`theme.space`).\nThe margin and padding props help promote consistency in layout\nwithout the need to add custom margin and padding declarations throughout an application.\nThe margin and padding props use a shorthand syntax, similar to other OOCSS approaches and many CSS libraries.\n\n```.jsx\n<Box\n  p={3}\n  mx={2}\n  my={4}\n  color='white'\n  bg='blue'>\n  Hello\n</Box>\n```\n\n- `m`: margin\n- `mt`: margin-top\n- `mr`: margin-right\n- `mb`: margin-bottom\n- `ml`: margin-left\n- `mx`: margin-left and margin-right\n- `my`: margin-top and margin-bottom\n- `p` : padding\n- `pt`: padding-top\n- `pr`: padding-right\n- `pb`: padding-bottom\n- `pl`: padding-left\n- `px`: padding-left and padding-right\n- `py`: padding-top and padding-bottom\n\n```jsx\n// Numbers reference steps on the spacing scale\n// e.g. 8px\n<Text m={2} />\n\n// Numbers greater than the length of `theme.space.length` are converted to pixels\n<Text my={256} />\n\n// Negative values can be used to add negative margins\n<Text mx={-2} />\n\n// Strings can be used for other values\n<Text mx='auto' />\n\n// Arrays can be used for mobile-first responsive styles\n<Text m={[ 0, 1, 2 ]} />\n```\n\n### Colors\n\nThe `color` and `bg` props make using colors from the color palette simple to help promote design consistency.\n\n```.jsx\n<Box color='white' bg='fuschia' p={3}>\n  Hello\n</Box>\n```\n\n```jsx\n// Keys reference values in the color palette object\n<Text color='blue' />\n\n// Background color can be set with the `bg` prop\n<Button bg='red' />\n\n// Values that do not map to a key in `theme.colors` can be used\n<Button bg='tomato' />\n\n// Arrays can be used to change colors responsively\n<Text color={[ 'blue', 'green' ]} />\n```\n\n### Responsive Styles\n\nAll of the core props above accept arrays as values to set mobile-first responsive styles.\nThe first value is not scoped to a media query and applies to all breakpoints.\nEach value after the first corresponds to a media query derived from `theme.breakpoints`.\n\nSee the [styled-system](https://github.com/jxnblk/styled-system#responsive-styles) docs for more info.\n\n```.jsx\n<Flex flexWrap='wrap'>\n  <Box\n    width={[ 1, 1/2 ]}\n    p={2}\n    color='white'\n    bg='blue'>\n    Hello\n  </Box>\n  <Box\n    width={[ 1, 1/2 ]}\n    p={2}\n    color='white'\n    bg='dark'>\n    Hello\n  </Box>\n</Flex>\n```\n\n```jsx\n<Text\n  width={[\n    1,    // 100% width at the smallest breakpoint\n    1/2,  // 50% width at the next breakpoint\n    null, // null skips a breakpoint\n    1/4   // 25% width at the next\n  ]}\n/>\n```\n\n## HTML Element Prop\n\nEach component accepts an `is` prop to change the underlying HTML element on a per-instance basis.\nThis is useful for ensuring semantic markup, while keeping styles decoupled.\n\n```.jsx\n<Heading\n  is='h1'\n  children='Top-level heading'\n/>\n```\n\n```.jsx\n<Button\n  is='a'\n  href='#!'\n  children='Link Button'\n/>\n```\n\n"}}]);